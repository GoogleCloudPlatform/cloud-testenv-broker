// The Broker is designed to simplify local execution by managing and enabling
// discovery of multiple emulated servers.

syntax = "proto3";

package google.emulators;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_outer_classname = "BrokerProto";
option java_package = "com.google.emulators";

// The Broker service provides custom target (URL) resolution and manages
// emulator programs, typically used for testing.
service Broker {
  // Creates an entry for an emulator. 
  // Returns ALREADY_EXISTS if an emulator with the same emulator_id already
  // exists.
  rpc CreateEmulator(Emulator) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/emulators";
      body: "*"
    };
  };

  // Finds an emulator, by emulator_id.
  // Returns NOT_FOUND if the emulator doesn't exist.
  rpc GetEmulator(EmulatorId) returns (Emulator) {
    option (google.api.http) = {
      get: "/v1/emulators/{emulator_id}";
    };
  };

  // Lists all emulators.
  rpc ListEmulators(google.protobuf.Empty) returns (ListEmulatorsResponse) {
    option (google.api.http) = {
      get: "/v1/emulators";
    };
  };

  // Starts the specified emulator, if it is not yet started. Blocks until
  // the emulator calls ReportEmulatorOnline() to indicate it has started.
  //
  // If the emulator is already ONLINE, returns ALREADY_EXISTS. If the emulator
  // is STARTING (e.g. another call to StartEmulator() was already in
  // progress), this call blocks until the result of the start operation is
  // known, and returns that.
  //
  // Returns ABORTED if the emulator does not start properly and no deadline
  // has been reached. Note that the broker has no way to check the liveness of
  // an emulator program after it starts successfully, i.e. calls
  // ReportEmulatorOnline().
  // Returns DEADLINE_EXCEEDED if no deadline was specified for the call, and
  // default_emulator_start_deadline elapses before the emulator starts
  // (see BrokerConfig). When a per-call deadline is specified, the operation
  // will be aborted when the deadline is reached. Note that since
  // DEADLINE_EXCEEDED may be enforced on the client-side, it is possible that
  // the emulator may in fact start even when this error is seen. The caller
  // can detect this by calling GetEmulator() and checking its state. It is
  // perhaps simpler for the caller to avoid setting a per-call deadline.
  // 
  // Returns NOT_FOUND if the emulator doesn't exist.
  rpc StartEmulator(EmulatorId) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/emulators/{emulator_id}:start";
    };
  };

  // Reports the state of an emulator as ONLINE. To be called by an emulator
  // program after it has completed initialization and is serving.
  // Returns FAILED_PRECONDITION if the requested emulator is not STARTING.
  // Returns NOT_FOUND if the emulator doesn't exist.
  rpc ReportEmulatorOnline(ReportEmulatorOnlineRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/emulators/{emulator_id}:report_online";
      body: "*";
    };
  };

  // Stops a running emulator. Returns success if the requested emulator is
  // already OFFLINE.
  // Returns NOT_FOUND if the emulator doesn't exist.
  rpc StopEmulator(EmulatorId) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/emulators/{emulator_id}:stop"
    };
  };

  // Creates a rule mapping input targets to output ("resolved") targets.
  // Returns ALREADY_EXISTS if a rule with the same rule_id already exists,
  // except if the existing rule is identical to the requested rule, in which
  // case this is a successful no-op.
  rpc CreateResolveRule(ResolveRule) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/resolve_rules";
      body: "*"
    };
  };

  // Finds a rule, by rule_id.
  // Returns NOT_FOUND if the rule doesn't exist.
  rpc GetResolveRule(ResolveRuleId) returns (ResolveRule) {
    option (google.api.http) = {
      get: "/v1/resolve_rules/{rule_id}";
    };
  };

  // Updates an existing resolve rule. Merges any new target patterns in with
  // existing target patterns.
  // Returns NOT_FOUND if the rule does not already exist.
  rpc UpdateResolveRule(ResolveRule) returns (ResolveRule) {
    option (google.api.http) = {
      patch: "/v1/resolve_rules/{rule_id}";
      body: "*"
    };
  };

  // Lists all rules.
  rpc ListResolveRules(google.protobuf.Empty) returns (ListResolveRulesResponse) {
    option (google.api.http) = {
      get: "/v1/resolve_rules";
    };
  };

  // Resolves an input target to an output ("resolved") target, using all known
  // rules. If no rules match the input, the input target is returned in the
  // response.
  // If multiple rules match, one of the matching rules will be used, with
  // no guarantee as to which one. This behavior may change in the future to
  // produce an error.
  // If an emulator is associated with the matching rule is not running, it
  // is started. If the emulator is not startable, or if it is running but its
  // associated rule has no resolved host, returns UNAVAILABLE.
  rpc Resolve(ResolveRequest) returns (ResolveResponse) {
    option (google.api.http) = {
      post: "/v1/resolve_rules:resolve"
      body: "*"
    };
  };
}

message CommandLine {
  // The path to a binary. If specified as a relative path, it must be
  // relative to the current working directory of the broker process.
  // REQUIRED
  string path = 1;

  // The command line arguments to pass to the binary, in the order specified.
  repeated string args = 2;
}

message Emulator {
  // A unique ID for this emulator. Consider using a simple, human-readable
  // prefix scheme, e.g. "google.pubsub".
  // REQUIRED
  string emulator_id = 1;

  // A command that launches the emulator. The emulator should run until the
  // associated process is terminated.
  //
  // Special tokens in the path and args with the pattern "{port:PORTNAME}",
  // where PORTNAME is some string (composed of letters, digits, dashes, and
  // dots), are replaced with a numeric port value when
  // this command is executed. PORTNAME is scoped to this command.
  //
  // Special tokens in the path and args with the pattern "{env:ENVNAME}",
  // where ENVNAME is the name of some environment variable, are replaced with
  // the value of the environment variable when this command is executed. If
  // the environment variable does not exist, the empty string is substituted.
  //
  // Special tokens in the path and args with the value "{dir:broker}" are
  // replaced with the absolute path to the running broker binary.
  //
  // REQUIRED
  CommandLine start_command = 2;

  // The ResolveRule associated with this emulator. Every emulator must have a
  // rule, but rules are not required to be associated to emulators.
  // REQUIRED
  ResolveRule rule = 3;

  // Whether this emulator should be started on-demand, e.g. lazily. When
  // true, Resolve() may start the emulator. When false, StartEmulator() must
  // be called explicitly.
  bool start_on_demand = 4;

  // The emulator state.
  enum State {
    OFFLINE = 0;
    STARTING = 1;
    ONLINE = 2;
  }
  State state = 5;
}

message EmulatorId {
  // REQUIRED
  string emulator_id = 1;
}

message ListEmulatorsResponse {
  repeated Emulator emulators = 1;
}

message ReportEmulatorOnlineRequest {
  // The emulator that is reporting itself to be online.
  // REQUIRED
  string emulator_id = 1;

  // An emulator may specify additional regular expressions for matching input
  // targets. These will be added to the existing patterns from the emulator's
  // ResolveRule.
  repeated string target_patterns = 2;

  // The host or host:port for connecting to this emulator.
  string resolved_host = 3;
}

message ResolveRule {
  // REQUIRED
  string rule_id = 1;

  // A regular expression used to match input targets.
  // See the documentation for the Resolve() method for the expected behavior
  // when patterns from more than one rule match a given target value, 
  repeated string target_patterns = 2;

  // The host or host:port that is resolved to.
  string resolved_host = 3;

  // Whether the resolved host requires a secure connection mechanism such as
  // TLS. Defaults to false.
  bool requires_secure_connection = 4;
}

message ResolveRuleId {
  // REQUIRED
  string rule_id = 1;
}

message ListResolveRulesResponse {
  repeated ResolveRule rules = 1;
}

message ResolveRequest {
  // The target endpoint to resolve. The following formats are supported:
  //
  //   host/host:port
  //       The resolved target is intended to replace the host or host:port
  //       value.
  //   URL with scheme
  //       The path and query parts of the URL are preserved in the resolved
  //       target. The scheme and host or host:port may change.
  //
  // REQUIRED
  string target = 1;
}

message ResolveResponse {
  // REQUIRED
  string target = 1;

  // Whether the target requires a secure connection.
  bool requires_secure_connection = 2;
}

message PortRange {
  int32 begin = 1;  // Inclusive
  int32 end = 2;    // Exclusive; positive values larger than "begin" only
}

message BrokerConfig {
  // The ranges of free ports that the broker is allowed to choose from.
  // Ranges must be non-overlapping. If none are specified, the broker will
  // choose ports arbitrarily, which might cause conflicts with other programs.
  repeated PortRange port_ranges = 1;

  // The emulators known by the broker.
  repeated Emulator emulators = 2;

  // The rules known by the broker.
  repeated ResolveRule rules = 3;

  // The deadline for all emulators started by the broker to begin serving.
  google.protobuf.Duration default_emulator_start_deadline = 4;
}
