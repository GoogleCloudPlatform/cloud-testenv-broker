// The gateway interface. See go/gateway-managed-fakes.

syntax = "proto3";

package gateway;

import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_outer_classname = "FakesProto";
option java_package = "com.google.experimental.fakes";

// The Gateway service provides access to one or more fakes which are
// registered to it.
service Gateway {
  // Registers a fake binary as the process that will handle RPCs with a given
  // URL pattern, or updates the resolved target.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Resolves the channel target to be used, given an input target. For an
  // input ID, resolves the channel target to be used, or reports NOT_FOUND.
  rpc Resolve(ResolveRequest) returns (ResolveResponse);

  // RPC to check liveness of this server.
  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message BinarySpec {
  // The path to the binary. If specified as a relative path, it must be
  // relative to the current working directory of the gateway process.
  // REQUIRED
  string path = 3;

  // The command line arguments to pass to the binary.
  repeated string args = 4;
}

// The registration for a fake.
message Registration {
  // A globally unique ID for this fake type. Only one registrant for this ID
  // can be known to a Gateway.
  // REQUIRED
  string id = 1;

  // A regular expression used to match channel targets which should resolve to
  // this fake. Required unless this is an update for an existing registrant.
  // CONDITIONALLY REQUIRED
  string target_pattern = 2;

  // Specifies the fake binary the gateway should start. Required unless
  // "resolved_target" is specified.
  // CONDITIONALLY REQUIRED
  BinarySpec binary_spec = 3;

  // The target that is resolved to. Required unless "binary_spec" is set.
  // CONDITIONALLY REQUIRED
  string resolved_target = 4;
}

message RegisterRequest {
  Registration registration = 1;
}

message RegisterResponse {}

message ResolveRequest {
  // The target to resolve. Optional if "id" is specified.
  // CONDITIONALLY REQUIRED
  string target = 1;

  // The registrant ID to resolve. Optional if "target" is specified.
  // CONDITIONALLY REQUIRED
  string id = 2;
}

message ResolveResponse {
  string resolved_target = 2;
}

message GatewayConfigFile {
  repeated Registration registrations = 1;
}
