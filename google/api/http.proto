// (== page http_rest ==)
syntax = "proto3";

package google.api;

option java_package = "com.google.api";
option java_outer_classname = "HttpProto";
option java_multiple_files = true;

// [google.api.Http][] defines the http configuration. It contains a list
// of rules of type [google.api.HttpRule][], each one specifying the
// mapping of an RPC method to one or more (pending b/18909583) HTTP JSON
// REST methods. The mapping determines what portions of the request
// message are populated from the path, query parameters, or body of the
// HTTP request.
//
// Typically, the mapping will be specified as an
// [annotation](annotations.shtml) using the [google.api.HttpRule][]
// type. However, for documentation purposes, we use the Yaml approach,
// which is equivalent to annotations.
//
// The mapping consists of a mandatory field specifying a path
// template and an optional field specifying what data is represented
// in the request body. The field name for the path indicates the HTTP
// method kind. Example:
//
//     http:
//       rules:
//       - selector: google.storage.v2.Storage.CreateObject
//         post: /v2/{bucket_name=buckets/*}/objects
//         body: object
//
// Here `bucket_name` and `object` bind to fields of the request message.
//
// The rules for mapping HTTP path, query parameters, and body fields
// to the request message are as follows:
//
// 1. The body field specifies either `*` or a field path, or is
//    omitted. If omitted, the body is empty.
// 2. Leaf fields (recursive expansion of nested messages in the
//    request) can be classified into three types:
//     1. Matched in the URL template
//     2. Covered by body (if body is `*`, everything except (a) fields;
//        else everything under the body field)
//     3. All other fields
// 3. Query parameters found in the HTTP request (after the `?` in the
//    URL) are mapped to (c) fields.
// 4. Any body sent with an HTTP request can contain only (b) fields.
//
// The syntax of the path template is as follows:
//
//     Template = "/" Segments [ Verb ];
//     Segments = Segment { "/" Segment } ;
//     Segment  = "*" | "**" | LITERAL | Variable ;
//     Variable = "{" FieldPath [ "=" Segments ] "}" ;
//     FieldPath = IDENT { "." IDENT } ;
//     Verb     = ":" LITERAL ;
//
// `*` matches a single path component, `**` zero or more path
// components, and `LITERAL` a constant.  A `Variable` can match an
// entire path as specified again by a template; this nested template
// must not contain further variables. If no template is given with a
// variable, it matches a single path component. The notation `{var}`
// is henceforth equivalent to `{var=*}`.
//
// Use CustomHttpPattern to specify any HTTP method that is not included in
// the pattern field, such as HEAD, or "*" to leave the HTTP method
// unspecified for a given URL path rule. The wild-card rule is useful for
// services that provide content to Web (HTML) clients.
message Http {
  // A list of HTTP rules for providing configurations for individual HTTP API
  // elements.
  repeated HttpRule rules = 1;
}

// An HTTP rule provides configuration for an individual HTTP API element.
message HttpRule {
  // Selector specifies a particular element it applies to. For information
  // about the selector pattern, see 'OVERVIEW.md' in the current directory.
  string selector = 1;

  // Determines the URL pattern is matched by this rules. This pattern can be
  // used with any of the {get|put|post|delete|patch} methods. A custom method
  // can be defined using the 'custom' field.
  oneof pattern {

    // Used for listing and getting information about resources.
    string get = 2;

    // Used for updating a resource.
    string put = 3;

    // Used for creating a resource.
    string post = 4;

    // Used for deleting a resource.
    string delete = 5;

    // Used for updating a resource.
    string patch = 6;

    // Custom pattern is used for defining custom verbs.
    CustomHttpPattern custom = 8;
  }

  // Body of the HTTP request.
  string body = 7;

  // Do not use this. For media support, add instead
  // [][google.bytestream.RestByteStream] as an API to your
  // configuration.
  MediaUpload media_upload = 9;

  // Do not use this. For media support, add instead
  // [][google.bytestream.RestByteStream] as an API to your
  // configuration.
  MediaDownload media_download = 10;

  // Additional HTTP bindings for the selector. Nested bindings should
  // not specify a selector.
  // (-- NOTE:  don't use, not fully implemented. --)
  repeated HttpRule additional_bindings = 11;
}

// A custom pattern is used for defining custom HTTP verb.
message CustomHttpPattern {
  // The name of this custom HTTP verb.
  string kind = 1;

  // The path matched by this custom verb.
  string path = 2;
}

// Do not use this. For media support, add instead
// [][google.bytestream.RestByteStream] as an API to your
// configuration.
message MediaUpload {
  // Whether upload is enabled.
  bool enabled = 3;
}

// Do not use this. For media support, add instead
// [][google.bytestream.RestByteStream] as an API to your
// configuration.
message MediaDownload {
  // Whether download is enabled.
  bool enabled = 1;
}
